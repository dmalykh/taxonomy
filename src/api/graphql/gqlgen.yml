# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - schema/*.graphql

# Where should the generated github.com/dmalykh/internal code go?
exec:
  filename: generated/generated.go
  package: generated

# Uncomment to enable federation
federation:
  filename: generated/federation.go
  package: generated

# Where should any generated models go?
model:
  filename: generated/genmodel/models_gen.go
  package: genmodel
  version: 2

# Where should the resolver implementations go?
#resolver:
#  layout: follow-schema
#  dir: graph
#  package: graph

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` terms in your models
# struct_term: json

# Optional: turn on to use []Thing instead of []*Thing
omit_slice_element_pointers: true

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
struct_fields_always_pointers: false

# Optional: turn off to make resolvers return values instead of pointers for structs
resolvers_always_return_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
#  - "github.com/dmalykh/internal/api/graphql/graph/genmodel"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  Cursor:
    model:
      - github.com/99designs/gqlgen/graphql.String
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.Int64
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int64
  Term:
    model:
      - github.com/dmalykh/internal/api/graphql/model.Term
  Vocabulary:
    model:
      - github.com/dmalykh/internal/api/graphql/model.Vocabulary